@inject HttpClient client
@inject NavigationManager navigation

<div class="shadow p-3 mb-3 rounded">
    <div class="row justify-content-center">
        <span class="@collapseIconCss" @onclick="ToggleCollapse"></span>
    </div>
    <div class="row">
        <div class="col">
            <h5 class="@titleCss" @onclick="ToggleDisplayTitleInput">@ProjectItem.Name</h5>
            <input class="form-control @titleInputCss" type="text" placeholder="Click here to edit" @onfocusout="UpdateTitle" @bind="ProjectItem.Name" />
        </div>
        <div class="col">
            <p class="float-right">Start Date</p>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <span>@ProjectItem.TotalTasks Tasks</span>
        </div>
        <div class="col">
            <p class="float-right">
                @if(ProjectItem.DoingTime != null)
                {
                    <span>@ProjectItem.DoingTime.Value.ToString("MM/dd/yy")</span>
                }
                else
                {
                    <span>Not Started</span>
                }
            </p>
        </div>
    </div>
    <div class="row">
        <div class="border border-secondary container-fluid">
            <div class="row p-1">
                <div class="bg-danger" style="height:24px;width:@ProjectItem.PercentageNew%"></div>
                <div class="bg-warning" style="height:24px;width:@ProjectItem.PercentageDoing%"></div>
                <div class="bg-success" style="height:24px;width:@ProjectItem.PercentageDone%"></div>
            </div>
        </div>
    </div>
    <hr>
    <div class="@collapseAreaCss">
        <div class="row p-3">
            <span class="@DescriptionCss" @onclick="ToggleDisplayDescriptionInput">@ProjectItem.Description</span>
            <input type="text" class="form-control @inputDescriptionCss" placeholder="Click here to add a description" @bind-value="newDescription" @onfocusout="AddDescription" />
        </div>
        <hr />
        <div class="row px-3">
            <div class="col" @onclick="SetToActive">
                <div class="d-xl-none d-lg-none">
                    <span class="oi oi-clipboard"></span>
                </div>
                <div class="d-none d-lg-block d-xl-block">
                    <span class="oi oi-clipboard"></span> Board
                </div>
            </div>
            <div class="col">
                <div class="d-xl-none d-lg-none">
                    <span class="oi oi-book"></span>
                </div>
                <div class="d-none d-lg-block d-xl-block">
                    <span class="oi oi-book"></span> History
                </div>
            </div>
            <div class="col">
                <div class="d-xl-none d-lg-none">
                    <span class="oi oi-box"></span>
                </div>
                <div class="d-none d-lg-block d-xl-block">
                    <span class="oi oi-box"></span> Archive
                </div>
            </div>
            <div class="col" @onclick="DeleteProject">
                <div class="d-xl-none d-lg-none">
                    <span class="oi oi-trash"></span>
                </div>
                <div class="d-none d-lg-block d-xl-block">
                    <span class="oi oi-trash"></span> Delete
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public ProjectItem ProjectItem { get; set; }

    [Parameter]
    public EventCallback RefreshProjectItemList { get; set; }

    private string newDescription;

    #region CSS Properties and Methods

    private bool displayDescriptionInput = false;
    private string inputDescriptionCss => displayDescriptionInput ? null : "d-none";
    private string DescriptionCss => displayDescriptionInput ? "d-none" : null;

    private bool displayCollapseArea = false;
    private string collapseAreaCss => displayCollapseArea ? null : "d-none";
    private string collapseIconCss => displayCollapseArea ? "oi oi-caret-bottom" : "oi oi-caret-top";

    private bool displayTitleInput = false;
    private string titleInputCss => displayTitleInput ? null : "d-none";
    private string titleCss => displayTitleInput ? "d-none" : null;

    public void ToggleDisplayDescriptionInput() => displayDescriptionInput = !displayDescriptionInput;
    public void ToggleDisplayTitleInput() => displayTitleInput = !displayTitleInput;
    public void ToggleCollapse() => displayCollapseArea = !displayCollapseArea;

    #endregion

    private async Task SetToActive()
    {
        ProjectItem.IsActive = true;
        await client.PutAsJsonAsync(Constants.ApiRoutes.ProjectSetActive, ProjectItem);
        navigation.NavigateTo("board");
    }

    public async Task UpdateTitle()
    {
        ToggleDisplayTitleInput();
        await UpdateProjectItem();
    }

    public async Task AddDescription()
    {
        if (!string.IsNullOrWhiteSpace(newDescription))
        {
            ProjectItem.Description = newDescription;
            await UpdateProjectItem();
            newDescription = string.Empty;
        }
        ToggleDisplayDescriptionInput();
    }

    public async Task UpdateProjectItem()
    {
        await client.PutAsJsonAsync(Constants.ApiRoutes.Project, ProjectItem);
    }

    private async Task DeleteProject()
    {
        await client.PostAsJsonAsync(Constants.ApiRoutes.ProjectDelete, ProjectItem);
        await RefreshProjectItemList.InvokeAsync(null);
    }

    private async Task ArchiveProject()
    {
        await client.PostAsJsonAsync(Constants.ApiRoutes.ProjectDelete, ProjectItem);
        await RefreshProjectItemList.InvokeAsync(null);
    }

}
